<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Ron Barabash</title>
		<link>https://ronbarabash.github.io/posts/</link>
		<description>Recent content in Posts on Ron Barabash</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Sun, 11 Oct 2020 00:00:00 +0000</lastBuildDate>
		<atom:link href="https://ronbarabash.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>TDD (Trust Driven Development) in Data Engineering</title>
			<link>https://ronbarabash.github.io/posts/tdd-in-data-engineering/</link>
			<pubDate>Sun, 11 Oct 2020 00:00:00 +0000</pubDate>
			
			<guid>https://ronbarabash.github.io/posts/tdd-in-data-engineering/</guid>
			<description>A practical guide for building reliable data pipelines using Metorikku and Deequ
In recent years, our data platform has experienced exponential growth. Hundreds of new Data sources, including databases, streaming Kafka topics, data warehouse tables, Elasticsearch indices and Parquet files are constantly extracted, transformed and loaded into various formats.
The initial users of the data layer were data engineers writing pipelines in Scala. This approach didn’t tolerate rapid growth and failed to scale.</description>
			<content type="html"><![CDATA[<p>A practical guide for building reliable data pipelines using Metorikku and Deequ</p>
<p>In recent years, our data platform has experienced exponential growth. Hundreds of new Data sources, including databases, streaming Kafka topics, data warehouse tables, Elasticsearch indices and Parquet files are constantly extracted, transformed and loaded into various formats.</p>
<p>The initial users of the data layer were data engineers writing pipelines in Scala. This approach didn’t tolerate rapid growth and failed to scale. So, as other generalist developers started to gain interest in the data layer, they were offered to develop and maintain their own pipelines. That’s how we introduced <a href="https://github.com/yotpoltd/metorikku">Metorikku</a>, a library based on Spark, which uses simple YAML configuration files to define ETL pipelines. Metorikku offers a variety of supported input and output formats such as Parquet files, Avro, JSON and CSV and various sources such as S3, Kafka, Redshift, Snowflake, JDBC and more…</p>
<p>Metorikku provides a clean and simple way to create a pipeline. But what about maintenance?</p>
<p>How do we verify it runs as planned on each designated duration? That is actually writing the data? That the data covers all our use-cases? That the data is of <strong>High Quality</strong>?</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/0*CiJDC8eUbaRddlYV" alt=""></p>
<p><img src="https://cdn-images-1.medium.com/max/2000/0*s3fwyKcEB_Ih2xZz" alt="This work is licensed under a Creative Commons Attribution-NonCommercial 2.5 Generic License."><em>This work is licensed under a <a href="http://creativecommons.org/licenses/by-nc/2.5/">Creative Commons Attribution-NonCommercial 2.5 Generic License</a>.</em></p>
<h2 id="a-brief-on-data-quality"><strong>A Brief on Data Quality</strong></h2>
<blockquote>
<p><em><strong>“Data is the fuel for intelligent decision making for both humans and machines. Just like high quality fuel ensures that jet engines run efficiently and reliably in the long run, high quality data fuels effective and reliable decision making”.</strong></em>
<a href="https://www.thoughtworks.com/profiles/ellen-koenig">Ellen König</a></p>
</blockquote>
<p>Data Quality is somewhat of a controversial topic, we all know it’s important, but it’s just so hard and tedious to fix data quality issues that sometimes we just ignore it.</p>
<p>Well, How would you go about fixing data quality issues?</p>
<ul>
<li>
<p>Discovery — Usually when a data set has been contaminated with bad quality data, we find out about it in retrospect, which leaves the consumers of data already offended by it.</p>
</li>
<li>
<p>Investigation — We need to trace back what might have caused this phenomenon, is it affecting something else? Is it in the pipeline itself? Is it the raw data?</p>
</li>
<li>
<p>Fixing — We need to fix the problem at the root cause, is this data source in our control? It might come from other teams? Other products? We should upload a fix to ignore this bug until it is fixed by someone else?</p>
</li>
</ul>
<p>There are just too many variables and this process can result eventually in a temporary patch that would later become permanent.</p>
<h2 id="what-have-we-done-up-until-now"><strong>What have we done up until now?</strong></h2>
<p>If any of the input data sources are missing or corrupted, we may experience a chain reaction in all the dependent outputs and the most terrifying thing about it is that we may not even know.</p>
<p>We understood early on that these sort of issues are posing a critical failure point in our architecture, so we started to implement various solutions to better monitor our data pipelines quality</p>
<h3 id="instrumentation-reporting"><strong>Instrumentation reporting</strong></h3>
<p>We systematically added simple steps to measure specific KPIs such as output size, null values count, id duplications, etc… These values were written to an Influx time-series DB and on top of that, we created dashboards in Grafana to visualize these values.
This strategy allowed us to:</p>
<ul>
<li>
<p>Create alerts when experiencing irregular values.</p>
</li>
<li>
<p>Track the recurring execution of a pipeline.</p>
</li>
<li>
<p>Visualize some of the business metrics we find interesting.</p>
</li>
</ul>
<p>This strategy pretty much covers all our needs.</p>
<p><em><strong>The problem is that it’s super high-friction and requires you to think of the KPIs, write the instrumentation steps, create the graphs and define alerts.</strong></em></p>
<h3 id="data-lake--data-warehouse-monitoring"><strong>Data Lake / Data Warehouse Monitoring</strong></h3>
<p>Using BI tools such as Redash to visualize actual data saved in our data lake/warehouse also proved to be quite an effective solution. It allowed us to monitor, not just a pipeline, but a complete use case. We can compare different tables to find matches or mismatches, to count daily accumulation of rows and basically to monitor data aggregated throughout the entire lifespan of the data sources.
Here we also face a high-friction process that requires the knowledge and maintenance of BI tools, in our case Redash.
This also proves to be quite expensive since we must have an ongoing DWH cluster or query engine to constantly sample the data.
Another solution, proven to be very valuable, is the use of automatic anomaly detections around the data assets with tools such as <a href="https://www.montecarlodata.com/">MonteCarlo</a>.</p>
<p>The main disadvantage of both of these approaches is <strong>that we monitor data that has already been saved in our sources</strong>.</p>
<p>We may already be in the midst of the cascading disaster chain and we’re not entirely sure which dependent pipelines had already been affected.</p>
<h3 id="wouldnt-it-be-great-if-could-preempt-these-violations-before-they-are-messing-our-entire-data-sources"><strong>Wouldnt it be great if could preempt these violations before they are messing our entire data sources?</strong></h3>
<p><img src="https://cdn-images-1.medium.com/max/7502/1*XoMSIQimUujLWvXY-vlwoQ.png" alt=""></p>
<h2 id="ok-so-what-are-you-suggesting"><strong>Ok. So what are you suggesting?</strong></h2>
<p>In the past couple of years, we have seen the emergence of several open-source tools in the space of data quality.</p>
<p><a href="https://griffin.apache.org/">Apache Griffin</a> from eBay, <a href="https://github.com/awslabs/deequ">Deequ</a> from AWS, <a href="https://greatexpectations.io/">Great Expectations</a>, and more.</p>
<p>As new data lake formats are also on the rise, tools like <a href="https://hudi.apache.org/">Hudi</a>, <a href="https://delta.io/">Delta</a> designed to help in versioning the data, and transform the state of certain data sources to a given point in time. With ACID like transactions, These tools also can help in reproducing problems and fixing datasets after they have been contaminated.</p>
<p>Another cool tool is <a href="https://lakefs.io/">LakeFS</a>, which essentially brings a “git-like” experience to your data, helping you run data pipelines on different “branches” and merge the results if they are valid and correct.</p>
<h2 id="metorikku--deequ--"><strong>Metorikku + Deequ = ❤️</strong></h2>
<p>Deequ is an open-source library built on top of Apache Spark for defining “unit tests for data”.</p>
<p>it enables the user to define rules and validations on top of Spark data frames and being used internally at Amazon for verifying the quality of many large production datasets.</p>
<p>We have integrated Deequ as a part of Metorikku, helping to define data quality validations in the same way you would define an SQL step within your pipeline.</p>
<p>We have also implemented a “Log Level” feature, when set to “Critical”, data quality validations can fail an entire pipeline before writing data to its designated output.</p>
<p>Adding Deequ as a part of our pipeline definition will enable you to monitor and validate that the data is of high quality <strong>in transit</strong>!</p>
<pre><code>steps:
- dataFrameName: moviesWithRatings
  sql:
    SELECT userid,
           movies.movieid,
           rating,
           timestamp,
           title,
           genres
    FROM ratings
    JOIN movies ON ratings.movieid = movies.movieid
  dq:
    level: warn
    checks:
      - isComplete:
          column: movieid
      - isUnique:
          level: warn
          column: rating

- dataFrameName: moviesWithRatings
  sql:
    SELECT CONCAT(userid, ' ',  movieid) AS userid_movieid
    FROM moviesWithRatings
  dq:
    level: error
    checks:
      - isUnique:
          column: userid_movieid
output:
- dataFrameName: moviesWithRatings
  outputType: Parquet
  outputOptions:
    saveMode: Overwrite
    path: moviesWithRatings.parquet
</code></pre>
<p><strong>This is huge!!</strong> We can prevent bad quality data from being written to our production systems and keep a close eye on how the data is behaving in production.</p>
<p>We decided to treat Data Quality validations just like we treat Unit Tests. We envision data quality as being a key step in any data pipeline which is now being shipped with Data Quality checks and validations in place.</p>
<p>This type of strategy will make each pipeline more <strong>robust</strong>, <strong>resilient,</strong> and <strong>trustworthy.</strong></p>
<p>Hence the title of this blog is “<strong>Trust Driven Development</strong>”</p>
<p><img src="https://cdn-images-1.medium.com/max/12032/1*Gvr7iTYmQZP-R2h__dscPA.jpeg" alt="In Transit! Photo by CHUTTERSNAP on Unsplash"><em>In Transit! Photo by <a href="https://unsplash.com/@chuttersnap?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">CHUTTERSNAP</a> on <a href="https://unsplash.com/s/photos/in-transit?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></em></p>
<p>We have implemented just a mere fraction of what Deequ is capable of, and we tend to add more operators based on use cases such as anomaly detection, normal distribution, and more (Open source contribution are most welcome)</p>
<h2 id="whats-next"><strong>What’s Next?</strong></h2>
<p>There are plenty of things to do around Data Quality in the world of Big Data.</p>
<p>We are certain that Metorikku + Deequ can help you by starting small.</p>
<p>By adding data quality validations to your day-to-day data engineering tasks you will substantially reduce ongoing crises and data pipeline maintenance.</p>
<p>These and more will help you build a pristine and crystal clear data “reservoir”, instead of a messy and muddy data lake.</p>
<p>I would like to thank the incredibly talented <a href="https://medium.com/@liebstein">Assaf Liebstein</a> for co-authoring this blog!</p>
<h2 id="appendix"><strong>Appendix</strong></h2>
<ul>
<li>
<p><a href="https://www.thoughtworks.com/insights/blog/how-much-can-you-trust-your-data">https://www.thoughtworks.com/insights/blog/how-much-can-you-trust-your-data</a></p>
</li>
<li>
<p><a href="https://aws.amazon.com/blogs/big-data/build-an-automatic-data-profiling-and-reporting-solution-with-amazon-emr-aws-glue-and-amazon-quicksight/">https://aws.amazon.com/blogs/big-data/build-an-automatic-data-profiling-and-reporting-solution-with-amazon-emr-aws-glue-and-amazon-quicksight/</a></p>
</li>
</ul>
]]></content>
		</item>
		
	</channel>
</rss>
